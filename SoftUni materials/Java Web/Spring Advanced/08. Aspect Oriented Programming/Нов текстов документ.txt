https://www.youtube.com/watch?v=7x98uDAEWTY&feature=youtu.be


https://softuni.bg

Software University

Technical Trainers

SoftUni Team

Aspect Oriented Programming AOP


2

What is AOP

Why do we use AOP?

AOP Concepts and Terminologies

Spring AOP AspectJ Annotation

Examples





Table of Contents


3



sli.do
#java-web

Have a Question?


What is AOP


5

AOP breaks the program logic into distinct parts 
(called concerns) 

It is used to increase modularity by cross-cutting concerns

Cross-cutting concern 

Concern that can affect the whole application and should be centralized in one location, such as transaction management, authentication, logging, security etc.

Aspect Oriented Programming AOP (1)


Why We Use AOP


7

To dynamically add the additional concern before,
 after or around the actual logic

Suppose that we have to maintain methods 
and needs to do actions before or after they are called

We can solve the problem with or without AOP



Why Use AOP


8

public class Student{

	public void actionOne(){...};

	public void actionTwo(){...};

	public void actionThree(){...};

	public void actionFour(){...};

	public void actionFive(){...};

}

Student class with some methods whose activity 
we want to track

Why Using AOP – Problem Example


9

Solution with AOP 

We can define the 
additional concern like 
maintaining log, sending notification, etc. in the  method of a class

Maintenance is easy in 
AOP

Problem without AOP

If we need to log all 
activity of student, we 
need to write additional code in all tracked methods

It leads to the maintenance problem.

Why Using AOP – Problem Solve


AOP Concepts and Terminology


11

The AOP concepts and terminologies are

Join point

Advice

Pointcut

Introduction

Target Object

Aspect

Interceptor

AOP Proxy

Weaving

Terminologies


12

Join point

A Join point is any point in your program such as method execution, exception handling, field access etc.

We can have many Join points

Spring supports only the method execution join point

Join Point


13

Represents an action taken by an aspect at a join point

Before Advice:  it executes before a join point

After Returning Advice: it executes after a joint point 
completes normally

After Throwing Advice: it executes if method exits by 
throwing an exception

After Advice: it executes after a join point regardless of join point exit whether normally or exceptional return

Around Advice: It executes before and after a join point



Advices and Types


14

Pointcut 

It is an expression language of AOP that matches join points

Introduction

Introduction of additional method and fields for a type

Target Object

The object i.e. being advised by one or more aspects

Also known as Proxied Object	

Pointcut, Introduction, Target Object


15

Aspect 

A class that contains advices

Interceptor

An aspect that contains only one advice

AOP Proxy

Used to implement aspect contracts, created by AOP framework

Weaving

The process of linking aspect with other application types or objects to create an advised object. 

 Aspect, Interceptor, AOP Proxy, Weaving


Spring AOP AspectJ Annotation


The 3 ways to use spring AOP are

By Spring1.2 Old style

By AspectJ annotation-style

The widely used approach is Spring AspectJ Annotation Style

By Spring XML configuration-style(schema based)









Spring AOP AspectJ

17


18

There are two ways to use Spring AOP AspectJ implementation 

By annotation







By XML Configuration









Spring AOP AspectJ (1)


19

@Aspect

Declares the class as aspect

@Pointcut

Declares the pointcut expression

@Before

Declares the before advice

Applied before calling the actual method

Annotations is Spring AspectJ AOP


20

@After 

Declares the after advice

Applied after calling the actual method and before 
returning result

@AfterReturning 

Declares the after returning advice

Applied after calling the actual method and before returning result, can get the result value in the advice

Annotations is Spring AspectJ AOP(2)


21

@Around

Declares the around advice

Applied before and after calling the actual method

@AfterThrowing 

Declares the throws advice

Applied if actual method throws exception

Annotations is Spring AspectJ AOP(2)


22

Pointcut is an expression language of Spring AOP

@Pointcut annotation is used to define the pointcut

We can also refer the pointcut expression by name

Pointcut


Applied on all the public methods



Applied on all the public methods of Student class



Applied on all the public setter methods of Student class



Applied on all the methods of class that returns an int value



23

@Pointcut("execution(public * *(..))")

Pointcut Expressions

@Pointcut("execution(* Student.*(..))") 

@Pointcut("execution(* Student.set*(..))")

@Pointcut("execution(int Student. *(..))")  


Live Demonstration

Examples


You remember from previous slides our Student class

25

public class Student {

	public void actionOne(){...};

	public void actionTwo(){...};

	public void actionThree(){...};

	public void actionFour(){...};

	public void actionFive(){...};

}

Prepare for AOP Examples


We need to create a class with @Aspect, that contains all advices

26

@Aspect

@Configuration

public class TrackStudent{

	@Pointcut("execution(* Student.*(..))")

	public track(){}

	

	//Can have more than one pointcuts

	//Here place all advices

}

Create Aspect Class


Add before advice to our TrackStudent class

27

@Aspect

@Configuration

public class TrackStudent {

	@Pointcut("execution(* Student.*(..))")

	public track(){}

	@Before("track()") // Execute before track pointcut	

	public void beforeAdvice(JoinPoint joinPoint){

		System.out.println("Before advice executed");

}}

@Before Example


Add after advice to our TrackStudent class

28

@Aspect

@Configuration

public class TrackStudent {

	@Pointcut("execution(* Student.*(..))")

	public track(){}

	@After("track()") // Execute after track pointcut	

	public void afterAdvice(JoinPoint joinPoint){

		System.out.println("After advice executed");

} }

@After Example


Add after returning advice to our TrackStudent class

29

...

@AfterReturning

(pointcut="execution(* Student.action())",returning="result") 

public void afterReturning(JoinPoint joinPoint, 
						Object result){

	System.out.println("AfterReturning advice executed");

	//In AfterReturning we can get the result of pointcut

}

...

@AfterReturning Example


Add around advice to our TrackStudent class

30

@Around("track()")

public Object aroundAdvices(ProceedingJoinPoint pjp) 
						throws Throwable {

	System.out.println("Before calling");

	Object obj = pjp.proceed(); 
	//We need to pass the pjp references in the advice 			method, so that we can proceed 
		the request by calling the proceed method

	System.out.println("After calling");

}

...

@Around Example


Add after throwing advice to our TrackStudent class

31

...

@AfterThrowing

(pointcut="execution(* Student.action())",throwing="error") 

Public void afterReturning(JoinPoint joinPoint, 
					Throwable error){

	System.out.println("AfterReturning advice executed");

	System.out.println("Exception is: " + error);

	//In AfterThrowing we can get the exception

}

...

@AfterThrowing Example


There are two way:


By annotation

By implementing interface

32

@Aspect

@Order(0) 

public class TrackStudent{//...}

Specifying Aspects Ordering

@Aspect

public class TrackStudent implements Ordered {

	//Override this method

	public int getOrder(){ return 0; }

}


…

…

…



Summary







AOP – Aspect Oriented Programming

Breaks the program logic into distinct 
parts (called concerns) 

Maintenance is easy in AOP

Spring AOP AspectJ Annotation

The widely used approach is 
Spring AspectJ Annotation Style

33


Questions?


35

Software University – High-Quality Education, Profession and Job for Software Developers

softuni.bg, about.softuni.bg 

Software University Foundation

softuni.foundation

Software University @ Facebook

facebook.com/SoftwareUniversity

Software University Forums

forum.softuni.bg

Trainings @ Software University (SoftUni)


36

This course (slides, examples, demos, exercises, homework, documents, videos and other assets) is copyrighted content

Unauthorized copy, reproduction or use is illegal

© SoftUni – https://about.softuni.bg/

© Software University – https://softuni.bg

License

