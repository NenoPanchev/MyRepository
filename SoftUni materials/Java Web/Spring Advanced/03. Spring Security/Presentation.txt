
Съдържание на документа

Spring Security

Spring Fundamentals

Software University

https://softuni.bg

SoftUni Team

Technical Trainers


sli.do
#java-web



Questions

2


Filters and Interceptors

Spring Security

Registration

Login

Remember Me

CSFR

Thymeleaf Security

Table of Contents

3


Filters and Interceptors


A filter is an object used to intercept the HTTP requests and       responses of your application

We can perform two operations at two instances:

Before sending the request to the controller

Before sending a response to the client

Filters

5


Filters Diagram

6


Filter Example(1)

@Component

public class GreetingFilter implements Filter {



    @Override

    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {

        HttpServletRequest request = (HttpServletRequest) servletRequest;

        HttpServletResponse response = (HttpServletResponse) servletResponse;



        request.getSession().setAttribute('name', 'Pesho');



        filterChain.doFilter(request, response);

    }

}

GreetingFilter.java

7


Filter Example(2)

@Controller

public class HomeController {



    @GetMapping('/')

    public ModelAndView index(ModelAndView modelAndView, HttpSession session) {

        modelAndView.setViewName('index');

        modelAndView.addObject('name', session.getAttribute('name'));



        return modelAndView;

    }

}

HomeController.java

8


Filter Example(3)

<!DOCTYPE html>

<html lang='en' xmlns='http://www.w3.org/1999/xhtml' xmlns:th='http://www.thymeleaf.org'>

<head>

    <meta charset='UTF-8'>

    <title>Filter Demo</title>

</head>

<body>

    <h1 th:text='|Hello, ${name}!|'></h1>

</body>

</html>

index.html

9


A Filter is used in the web layer only as it is defined in web.xml. We can not use it out of web context 

While Spring Interceptors can be used anywhere because it is defined in Application context

The interceptor include three main methods:

preHandle: executed before the execution of the target resource

afterCompletion: executed after the execution of the target resource (after rendering the view)

postHandle: Intercept the execution of a handler

Interceptor

10


Interceptor Diagram

11


Interceptor Example(1)

public class LoginInteceptor implements HandlerInterceptor {



    @Override

    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, 	FilterChain filterChain, Object handler) throws IOException, ServletException {

		//Log some information ...



		retrun true;

	}

}

LoginInterceptor

12


To use interceptors we need to register them 



Register Interceptor in Configuration

@Configuration

@EnableWebMvc

public class WebConfiguration implements WebMvcConfigurer {



    private final MyInterceptor myInterceptor;



    public WebConfiguration(MyInterceptor myInterceptor) {

        this.myInterceptor = myInterceptor;

    }



    @Override

    public void addInterceptors(InterceptorRegistry registry) {

        registry.addInterceptor(myInterceptor);

    }

}

13


Spring Security


A powerful and highly customizable authentication and access-control framework

It is the de-facto standard for 
securing Spring-based applications

Focuses on providing both 
authentication and authorization 
to Java applications

What is Spring Security?

15


Authorization

What you are allowed to do

Authentication

Who is logged in

Spring Security

16


Spring Security Filter Chain

Client

Filter 0

DelegatingFilterProxy



Filter 2

Servlet

FilterChainProxy

Security Filter 0

Security Filter N







SecurityFilterChain

FilterChain

17


Security Context and Authentication

SecurityContextHolder










SecurityContext





Authentication



Principal

Credentials

Authorities

At the heart of Spring Security's authentication model is the SecurityContextHolder

It contains the SecurityContext




18


Spring Security Mechanism

Intercept

Request

GET
username password

Database

Validate

username
password

Valid
Credentials

Validate
Roles

Valid
Authorization

Secured Resources

Web Client

Intercept

Request

Auth. manager

Access Decision Manager

19


Adding Spring Security in pom.xml.



Spring Security Maven

<dependency>

<groupId>org.springframework.boot</groupId>

<artifactId>spring-boot-starter-security</artifactId>

</dependency>

pom.xml

20


Extending the WebSecurityConfigurerAdapter class.



Spring Security Configuration (1)

@Configuration

@EnableWebSecurity //Can be omitted because of WebSecurityConfigurerAdapter

public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

//Configuration goes here

}

SecurityConfiguration.java

21


Spring Security Configuration (2)

Override configure(HttpSecurity http)



@Override

protected void configure(HttpSecurity http) throws Exception {

http

    .authorizeRequests()

    .antMatchers('/', '/register').permitAll()

    .anyRequest().authenticated()

}

SecurityConfiguration.java

Authorize Requests

Permit Routes

Require Authentication

22


Registration – User

We need to implement UserDetails interface





@Entity

public class User implements UserDetails {

    private String username;

    private String password;

    private boolean isAccountNonExpired;

    private boolean isAccountNonLocked;

    private boolean isCredentialsNonExpired;

    private boolean isEnabled;
    private Set<Role> authorities;

}

User.java

23


Implementing the GrantedAuthority interface.



Registration – Roles

public class Role implements GrantedAuthority {

    private String authority;

}

Role.java

Role Interface

24


25

If we want, we can use SimpleGrantedAuthority 
instead of creating Role class

Is a basic concrete implementation of a GrantedAuthority

Stores a String representation of an authority granted 
to the Authentication object

SimpleGrantedAuthority


Implementing the UserDetailsService interface.



Registration – UserService

@Service

public class UserServiceImpl implements UserDetailsService {

    @Autowired

    private BCryptPasswordEncoder bCryptPasswordEncoder;


    

    public void register(RegisterModel registerModel) {       	bCryptPasswordEncoder.encode(password));

    }
}

UserServiceImpl.java

Encrypt Password

26


27

Register User In memory with 
overriding configure

...

@Override
protected void configure (AuthenticationManagerBuilder auth) throws Exception {

auth

  .inMemoryAuthentication()
  .withUser("user")
                          .password(bCryptPasswordEncoder.encode("user")).roles("USER")
  .and()
  .withUser("admin")
                  .password(bCryptPasswordEncoder.encode("admin")).roles("ADMIN");
}…


Disabling CSRF protection temporarily. 



Registration – Configuration

@Override

    protected void configure(HttpSecurity http) throws Exception {

        http

            .and()

            .csrf().disable();

    }

SecurityConfiguration.java

Disable CSRF

28


Login Mechanism

Web Client

GET localhost:8080

Session Cookie

GET localhost:8080

Session Cookie

Create 
Session

Validate 
Session

29


Login – Configuration

.and()

  .formLogin().loginPage('/login').permitAll()

  .usernameParameter('username')

  .passwordParameter('password')

SecurityConfiguration.java

<input type='text' name='username'/>

<input type='text' name='password'/>

login.html

30


Login – UserService

@Service

public class UserServiceImpl implements UserDetailsService {

    @Autowired

    private BCryptPasswordEncoder bCryptPasswordEncoder;


    @Override

    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

    }
}

UserServiceImpl.java

User Service Interface

31


Login – Controller

@Controller

public class LoginController {

    @GetMapping('/login')

    public String getLoginPage(@RequestParam(required = false) String error, Model model) {

        if(error != null){

            model.addAttribute('error', 'Error');

        }



        return 'login';

    }
}

LoginController.java

Error Handling

32


Logout

.and()                      

.logout().logoutSuccessUrl('/login?logout').permitAll()

SecurityConfiguration.java

Logout. No Controller is required

33


Remember Me

.and()

     .rememberMe()

     .rememberMeParameter('remember')

     .key('remember Me Encryption Key')

     .rememberMeCookieName('rememberMeCookieName')

     .tokenValiditySeconds(10000)

SecurityConfiguration.java

<input name='remember' type='checkbox' />

login.html

34


This is the currently logged user

Principal

@GetMapping('/user')

public String getUser(Principal principal){

    System.out.println(principal.getName());

    return 'user';

}

UserController.java

Print Logged-In username

35


Grant Access to specific methods

Pre / Post Authorize

@EnableGlobalMethodSecurity(prePostEnabled = true)

public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
}

SecurityConfiguration.java

public interface UserService extends UserDetailsService {

    @PreAuthorize('hasRole('ADMIN')')

    void delete();

}

UserService.java

Enables PreAuthorize

Requires Admin Role to execute

36


No Access Handling

.and()                .exceptionHandling().accessDeniedPage('/unauthorized')

SecurityConfiguration.java

@GetMapping('/unauthorized')

public String unauthorized(){

    return 'unauthorized';

}

AccessController.java

37


Cross-Site Request Forgery


Spring CSFR Protection

.csrf()

   .csrfTokenRepository(csrfTokenRepository())



private CsrfTokenRepository csrfTokenRepository() {

  HttpSessionCsrfTokenRepository repository = new HttpSessionCsrfTokenRepository();

  repository.setSessionAttributeName("_csrf");

  return repository;

}

<input type='hidden' th:name='${_csrf.parameterName}' th:value='${_csrf.token}' />

form.html

39


Thymeleaf Security


Functionality to Thymeleaf

Thymeleaf Security

<dependency>

	<groupId>org.thymeleaf.extras</groupId>

	<artifactId>thymeleaf-extras-springsecurity5</artifactId>

</dependency>

pom.xml

41


Principal

<!DOCTYPE html>

<html lang='en'

      xmlns:th='http://www.thymeleaf.org'

      xmlns:sec='http://www.thymeleaf.org/extras/spring-security'>

<body>

<div sec:authentication='name'>

    The value of the 'name' property of the authentication object should appear here.

</div>

</body>

</html>

index.xml

Show the username

42


Roles

<!DOCTYPE html>

<html lang='en'

      xmlns:th='http://www.thymeleaf.org'

      xmlns:sec='http://www.thymeleaf.org/extras/spring-security'>

<body>

<div sec:authorize='hasRole('ADMIN')'>

    This content is only shown to administrators.

</div>

</body>

</html>

index.xml

Show if you are admin

43








Summary



What is the difference between Filters and Interceptors

What is Spring Security and how to implement it

How to use Thymeleaf Security





44


Questions?


Software University – High-Quality Education, Profession and Job for Software Developers

softuni.bg, about.softuni.bg 

Software University Foundation

softuni.foundation

Software University @ Facebook

facebook.com/SoftwareUniversity

Software University Forums

forum.softuni.bg

Trainings @ Software University (SoftUni)

46


This course (slides, examples, demos, exercises, homework, documents, videos and other assets) is copyrighted content

Unauthorized copy, reproduction or use is illegal

© SoftUni – https://about.softuni.bg/

© Software University – https://softuni.bg

License

47


