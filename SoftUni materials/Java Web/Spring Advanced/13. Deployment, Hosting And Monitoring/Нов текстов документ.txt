https://www.youtube.com/watch?v=xbOHIXRryzs&feature=youtu.be


Deployment, Hosting and Monitoring

Software University

https://softuni.bg

SoftUni Team

Technical Trainers


Deployment

Actuator

Micrometer

Prometheus





Table of Contents

2




sli.do
#java-web

Have a Question?

3


Deployment


Deployment means to push changes or update from one environment to another



What is Deployment?

5


We can deploy one project onto multiple websites

Some of the deployment websites

Heroku

Amazon Web Services (AWS)

Google Cloud Platform

Where to Deploy?

6


There are 3 ways to deploy a project on Heroku

Using Git (Heroku Git, Heroku CLI)

Using Github

Using the Container Registry (Heroku CLI)

Deploying On Heroku

7


Before running our project, we should add 3 important keys to deploy the project

Create 2 new files in our project folder

Procfile

system.properties

Procfile and System.properties

8


system.properties

Holds all of the system configuration properties needed to run the project

By default, Heroku uses JDK Version 1.8

To specify specific version:

System.properties

java.runtime.version={version}

9


Procfile

Holds the executed commands by the application on startup

Should include:

web: java -jar target/{name}-{version}.jar

Procfile

<version>1.0.0-SNAPSHOT</version>

<name>project_name</name>

pom.xml

10


Application.properties

spring.datasource.url=${JDBC_DATABASE_URL:}

spring.datasource.username=${JDBC_DATABASE_USERNAME:}

spring.datasource.password=${JDBC_DATABASE_PASSWORD:}



server.port=${PORT:8080}



spring.datasource.hikari.connection-timeout=30000

spring.datasource.hikari.maximum-pool-size=10



spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

application.properties

11


Deploy with Git


Download Heroku CLI

In the bash terminal, write the command


For creating a new Git repository

Go to the directory of the project

In the bash terminal, write

heroku login 

Deploying On Heroku with Git

git init

13


Create a new Git repository




Create a new Heroku project and bind it with the git repository




git add .

git commit

Deploying On Heroku with Git (2)

heroku create

git remote -v

heroku git: remote -a <project-name>

14


Add the PostgreSQL addon



Push the project to Heroku



Change the ps:scale

Check logs

Deploying On Heroku with Git (3)

git push heroku master

heroku ps:scale web=1

heroku addons:create heroku-postgresql

heroku logs --tail

15


Deploy with Github


Create a registration in the Heroku website

Deploying On Heroku with Github

17


Create a new App

Deploying On Heroku with Github (2)

18


Add to the installed 
add-ons: 

heroku-postgres

Deploying On Heroku with Github (3)

19


Go to deploy tab, check "Github" and add your repository

Deploying On Heroku with Github (3)

20


Monitor and manage your application

Actuator

21


Spring Boot includes a number of additional features to help you monitor and manage your application when you push it to production

You can choose to manage and monitor your application by using HTTP endpoints or with JMX

Auditing, health, and metrics gathering can also be automatically applied to your application

Actuator


The recommended way to enable the features is to add a dependency on the spring-boot-starter-actuator 'Starter'. 

23

<dependencies> 

  <dependency> 

    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId> 

  </dependency> 

</dependencies>

Actuator dependency


24

Endpoints let you monitor and interact with 
your application

Spring Boot includes a number of built-in 
endpoints and lets you add your own

Each individual endpoint can be enabled 
or disabled and exposed

Actuator Endpoints


For example, by default, the health endpoint is 
mapped to /actuator

25

Actuator example


To expose all actuator endpoints you need to add in application.properties file:

	       management.endpoints.web.exposure.include=*

26

Expose all actuator endpoints


If you prefer all endpoints to be disabled  

Set the management.endpoints.enabled-by-default = false

Use individual endpoint enabled properties

On example, enable info endpoint 

27

management.endpoints.enabled-by-default=false

management.endpoint.info.enabled=true

Enabling Endpoints


You should take care to secure HTTP endpoints in the same way that you would any other sensitive URL

If Spring Security is present, endpoints are secured by default using Spring Security's content-negotiation strategy

Example of custom security configuration for HTTP endpoints

28

@Configuration(proxyBeanMethods = false)

public class ActuatorSecurity extends WebSecurityConfigurerAdapter {

    @Override

    protected void configure(HttpSecurity http) throws Exception {

        http.requestMatcher(EndpointRequest.toAnyEndpoint()).authorizeRequests((requests) ->

                requests.anyRequest().hasRole("ROLE_ADMIN"));

        http.httpBasic();

    }}

 Securing HTTP Endpoints


If you add a @Bean annotated with @Endpoint, any methods annotated with @ReadOperation, @WriteOperation, or @DeleteOperation are automatically exposed over JMX and, in a web application, over HTTP

29

@Component

@Endpoint(enableByDefault = true, id="custom")

public class CustomEndpoint {

    @ReadOperation

    public String getMyEndpoint(){

        return "My custom endpoint";

    } }

Implementing Custom Endpoints


If we want we can create Endpoints with @RestControllerEndpoint annotation

30

@Component

@RestControllerEndpoint( id="myRestEndpoint" )

public class MyRestEndpoint {



    @GetMapping("/test")

    @ResponseBody

    public String test(){

        return "My custom rest endpoint";

    }

}

Implementing Custom Endpoints (2)


Customizing the Management Endpoint Paths

management.endpoints.web.base-path=/manage

Customizing the Management Server Port

management.server.port=8081

Disabling HTTP Endpoints

management.server.port=-1

Customizing properties

31


32

Using the Spring Boot Actuator give us a lot of information 
our application, but it's not very user-friendly

Can be integrated with Spring Boot Admin for visualization, 
but it has it's limitations and it's less popular

Tools like Prometheus and Grafana are more commonly 
used for the monitoring and visualization and are language/framework-independent

These tools have their own set of data formats and converting 
the metrics data

Vizualization Tools




Micrometer

33


34

Solves the problem of being a vendor-neutral 
data provider

Automatically exposes /actuator/metrics 
data into something your monitoring 
system can understand

You need to include a vendor-specific 
micrometer dependency

Micrometer


Micrometer is a separate open-sourced project and is not in 
the Spring ecosystem, so we have to explicitly add it 
as a dependency

If using Prometheus, add it's specific dependency

35

<dependency>

	<groupId>io.micrometer</groupId>

	<artifactId>micrometer-registry-prometheus</artifactId>

</dependency>

Micrometer Dependency


36

After adding the micrometer dependency, we have 
a new endpoint - /actuator/prometheus

The data is formatted in specific for Prometheus format



Micrometer Example


Prometheus

37


38

Time-series database that stores the metric 
data by pulling it (using a built-in data scraper) 
periodically over HTTP

Intervals between pulls can be configured

Has a simple user interface where we can visualize/query on all of the collected metrics

To configure Prometheus more precisely we 
using the prometheus.yaml file

Prometheus


You can download Prometheus from here

Configure Prometheus with prometheus.yaml file

39

global:

  scrape_interval: 15s # By default, scrape targets every 15 seconds.

# A scrape configuration containing exactly one endpoint to scrape:

# Here it's Prometheus itself.

scrape_configs:

  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.

  - job_name: 'prometheus'

    # Override the global default and scrape targets from this job every 5 seconds.

    scrape_interval: 5s

    static_configs:

      - targets: ['localhost:9090']

Download and Configure Prometheus


After starting Prometheus, we can access 
it on http://localhost:9090

40

Prometheus Dashboard


41

Prometheus provides a functional query language 
called PromQL (Prometheus Query Language)

Let's the user select and aggregate time series data 
in real time

Result of an expression can either be shown as a graph, 
viewed as tabular data in Prometheus' expression browser, or consumed by external systems via the HTTP API

Prometheus Query Language - PromQL


Return all time series with the metric http_requests_total and the given job and handler labels



Return a whole range of time for the same vector



Using regular expressions

42

http_requests_total{job="apiserver", handler="/api/comments"}

Prometheus Query Language – PromQL (2)

http_requests_total{job="apiserver", handler="/api/comments"}[5m]

http_requests_total{job=~".*server"}

http_requests_total{status!~"4.."}


…

…

…



Summary









Deployment means to push changes or update from one environment to another

Micrometer solves the problem of being a vendor-neutral data provider

Prometheus is a Time-series database that stores the metric data by pulling it (using a built-in data scraper) periodically over HTTP





43


Questions?


Software University – High-Quality Education, Profession and Job for Software Developers

softuni.bg, about.softuni.bg 

Software University Foundation

softuni.foundation

Software University @ Facebook

facebook.com/SoftwareUniversity

Software University Forums

forum.softuni.bg

Trainings @ Software University (SoftUni)

45


This course (slides, examples, demos, exercises, homework, documents, videos and other assets) is copyrighted content

Unauthorized copy, reproduction or use is illegal

© SoftUni – https://about.softuni.bg/

© Software University – https://softuni.bg

License

46

